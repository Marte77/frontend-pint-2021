{"ast":null,"code":"(function ($) {\n  /**\n   * Holds google map object and related utility entities.\n   * @constructor\n   */\n  function GMapContext(domElement, options) {\n    var _map = new google.maps.Map(domElement, options);\n\n    var _marker = new google.maps.Marker({\n      position: new google.maps.LatLng(54.19335, -3.92695),\n      map: _map,\n      title: \"Drag Me\",\n      visible: options.markerVisible,\n      draggable: options.markerDraggable,\n      icon: options.markerIcon !== undefined ? options.markerIcon : undefined\n    });\n\n    return {\n      map: _map,\n      marker: _marker,\n      circle: null,\n      location: _marker.position,\n      radius: options.radius,\n      locationName: options.locationName,\n      addressComponents: {\n        formatted_address: null,\n        addressLine1: null,\n        addressLine2: null,\n        streetName: null,\n        streetNumber: null,\n        city: null,\n        district: null,\n        state: null,\n        stateOrProvince: null\n      },\n      settings: options.settings,\n      domContainer: domElement,\n      geodecoder: new google.maps.Geocoder()\n    };\n  } // Utility functions for Google Map Manipulations\n\n\n  var GmUtility = {\n    /**\n     * Draw a circle over the the map. Returns circle object.\n     * Also writes new circle object in gmapContext.\n     *\n     * @param center - LatLng of the center of the circle\n     * @param radius - radius in meters\n     * @param gmapContext - context\n     * @param options\n     */\n    drawCircle: function (gmapContext, center, radius, options) {\n      if (gmapContext.circle != null) {\n        gmapContext.circle.setMap(null);\n      }\n\n      if (radius > 0) {\n        radius *= 1;\n        options = $.extend({\n          strokeColor: \"#0000FF\",\n          strokeOpacity: 0.35,\n          strokeWeight: 2,\n          fillColor: \"#0000FF\",\n          fillOpacity: 0.20\n        }, options);\n        options.map = gmapContext.map;\n        options.radius = radius;\n        options.center = center;\n        gmapContext.circle = new google.maps.Circle(options);\n        return gmapContext.circle;\n      }\n\n      return null;\n    },\n\n    /**\n     *\n     * @param gMapContext\n     * @param location\n     * @param callback\n     */\n    setPosition: function (gMapContext, location, callback) {\n      gMapContext.location = location;\n      gMapContext.marker.setPosition(location);\n      gMapContext.map.panTo(location);\n      this.drawCircle(gMapContext, location, gMapContext.radius, {});\n\n      if (gMapContext.settings.enableReverseGeocode) {\n        this.updateLocationName(gMapContext, callback);\n      } else {\n        if (callback) {\n          callback.call(this, gMapContext);\n        }\n      }\n    },\n    locationFromLatLng: function (lnlg) {\n      return {\n        latitude: lnlg.lat(),\n        longitude: lnlg.lng()\n      };\n    },\n    addressByFormat: function (addresses, format) {\n      var result = null;\n\n      for (var i = addresses.length - 1; i >= 0; i--) {\n        if (addresses[i].types.indexOf(format) >= 0) {\n          result = addresses[i];\n        }\n      }\n\n      return result || addresses[0];\n    },\n    updateLocationName: function (gmapContext, callback) {\n      gmapContext.geodecoder.geocode({\n        latLng: gmapContext.marker.position\n      }, function (results, status) {\n        if (status == google.maps.GeocoderStatus.OK && results.length > 0) {\n          var address = GmUtility.addressByFormat(results, gmapContext.settings.addressFormat);\n          gmapContext.locationName = address.formatted_address;\n          gmapContext.addressComponents = GmUtility.address_component_from_google_geocode(address.address_components);\n        } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n          return setTimeout(function () {\n            GmUtility.updateLocationName(gmapContext, callback);\n          }, 1000);\n        }\n\n        if (callback) {\n          callback.call(this, gmapContext);\n        }\n      });\n    },\n    address_component_from_google_geocode: function (address_components) {\n      var result = {};\n\n      for (var i = address_components.length - 1; i >= 0; i--) {\n        var component = address_components[i]; // Postal code\n\n        if (component.types.indexOf('postal_code') >= 0) {\n          result.postalCode = component.short_name;\n        } // Street number\n        else if (component.types.indexOf('street_number') >= 0) {\n            result.streetNumber = component.short_name;\n          } // Street name\n          else if (component.types.indexOf('route') >= 0) {\n              result.streetName = component.short_name;\n            } // City\n            else if (component.types.indexOf('locality') >= 0) {\n                result.city = component.short_name;\n              } // District\n              else if (component.types.indexOf('sublocality') >= 0) {\n                  result.district = component.short_name;\n                } // State \\ Province\n                else if (component.types.indexOf('administrative_area_level_1') >= 0) {\n                    result.stateOrProvince = component.short_name;\n                  } // State \\ Province\n                  else if (component.types.indexOf('country') >= 0) {\n                      result.country = component.short_name;\n                    }\n      }\n\n      result.addressLine1 = [result.streetNumber, result.streetName].join(' ').trim();\n      result.addressLine2 = '';\n      return result;\n    }\n  };\n\n  function isPluginApplied(domObj) {\n    return getContextForElement(domObj) != undefined;\n  }\n\n  function getContextForElement(domObj) {\n    return $(domObj).data(\"locationpicker\");\n  }\n\n  function updateInputValues(inputBinding, gmapContext) {\n    if (!inputBinding) return;\n    var currentLocation = GmUtility.locationFromLatLng(gmapContext.marker.position);\n\n    if (inputBinding.latitudeInput) {\n      inputBinding.latitudeInput.val(currentLocation.latitude).change();\n    }\n\n    if (inputBinding.longitudeInput) {\n      inputBinding.longitudeInput.val(currentLocation.longitude).change();\n    }\n\n    if (inputBinding.radiusInput) {\n      inputBinding.radiusInput.val(gmapContext.radius).change();\n    }\n\n    if (inputBinding.locationNameInput) {\n      inputBinding.locationNameInput.val(gmapContext.locationName).change();\n    }\n  }\n\n  function setupInputListenersInput(inputBinding, gmapContext) {\n    if (inputBinding) {\n      if (inputBinding.radiusInput) {\n        inputBinding.radiusInput.on(\"change\", function (e) {\n          var radiusInputValue = $(this).val();\n\n          if (!e.originalEvent || isNaN(radiusInputValue)) {\n            return;\n          }\n\n          gmapContext.radius = radiusInputValue;\n          GmUtility.setPosition(gmapContext, gmapContext.location, function (context) {\n            context.settings.onchanged.apply(gmapContext.domContainer, [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n          });\n        });\n      }\n\n      if (inputBinding.locationNameInput && gmapContext.settings.enableAutocomplete) {\n        var blur = false;\n        gmapContext.autocomplete = new google.maps.places.Autocomplete(inputBinding.locationNameInput.get(0), gmapContext.settings.autocompleteOptions);\n        google.maps.event.addListener(gmapContext.autocomplete, 'place_changed', function () {\n          blur = false;\n          var place = gmapContext.autocomplete.getPlace();\n\n          if (!place.geometry) {\n            gmapContext.settings.onlocationnotfound(place.name);\n            return;\n          }\n\n          GmUtility.setPosition(gmapContext, place.geometry.location, function (context) {\n            updateInputValues(inputBinding, context);\n            context.settings.onchanged.apply(gmapContext.domContainer, [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n          });\n        });\n\n        if (gmapContext.settings.enableAutocompleteBlur) {\n          inputBinding.locationNameInput.on(\"change\", function (e) {\n            if (!e.originalEvent) {\n              return;\n            }\n\n            blur = true;\n          });\n          inputBinding.locationNameInput.on(\"blur\", function (e) {\n            if (!e.originalEvent) {\n              return;\n            }\n\n            setTimeout(function () {\n              var address = $(inputBinding.locationNameInput).val();\n\n              if (address.length > 5 && blur) {\n                blur = false;\n                gmapContext.geodecoder.geocode({\n                  'address': address\n                }, function (results, status) {\n                  if (status == google.maps.GeocoderStatus.OK && results && results.length) {\n                    GmUtility.setPosition(gmapContext, results[0].geometry.location, function (context) {\n                      updateInputValues(inputBinding, context);\n                      context.settings.onchanged.apply(gmapContext.domContainer, [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                    });\n                  }\n                });\n              }\n            }, 1000);\n          });\n        }\n      }\n\n      if (inputBinding.latitudeInput) {\n        inputBinding.latitudeInput.on(\"change\", function (e) {\n          var latitudeInputValue = $(this).val();\n\n          if (!e.originalEvent || isNaN(latitudeInputValue)) {\n            return;\n          }\n\n          GmUtility.setPosition(gmapContext, new google.maps.LatLng(latitudeInputValue, gmapContext.location.lng()), function (context) {\n            context.settings.onchanged.apply(gmapContext.domContainer, [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n            updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n          });\n        });\n      }\n\n      if (inputBinding.longitudeInput) {\n        inputBinding.longitudeInput.on(\"change\", function (e) {\n          var longitudeInputValue = $(this).val();\n\n          if (!e.originalEvent || isNaN(longitudeInputValue)) {\n            return;\n          }\n\n          GmUtility.setPosition(gmapContext, new google.maps.LatLng(gmapContext.location.lat(), longitudeInputValue), function (context) {\n            context.settings.onchanged.apply(gmapContext.domContainer, [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n            updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n          });\n        });\n      }\n    }\n  }\n\n  function autosize(gmapContext) {\n    google.maps.event.trigger(gmapContext.map, 'resize');\n    setTimeout(function () {\n      gmapContext.map.setCenter(gmapContext.marker.position);\n    }, 300);\n  }\n\n  function updateMap(gmapContext, $target, options) {\n    var settings = $.extend({}, $.fn.locationpicker.defaults, options),\n        latNew = settings.location.latitude,\n        lngNew = settings.location.longitude,\n        radiusNew = settings.radius,\n        latOld = gmapContext.settings.location.latitude,\n        lngOld = gmapContext.settings.location.longitude,\n        radiusOld = gmapContext.settings.radius;\n    if (latNew == latOld && lngNew == lngOld && radiusNew == radiusOld) return;\n    gmapContext.settings.location.latitude = latNew;\n    gmapContext.settings.location.longitude = lngNew;\n    gmapContext.radius = radiusNew;\n    GmUtility.setPosition(gmapContext, new google.maps.LatLng(gmapContext.settings.location.latitude, gmapContext.settings.location.longitude), function (context) {\n      setupInputListenersInput(gmapContext.settings.inputBinding, gmapContext);\n      context.settings.oninitialized($target);\n    });\n  }\n  /**\n   * Initializeialization:\n   *  $(\"#myMap\").locationpicker(options);\n   * @param options\n   * @param params\n   * @returns {*}\n   */\n\n\n  $.fn.locationpicker = function (options, params) {\n    if (typeof options == 'string') {\n      // Command provided\n      var _targetDomElement = this.get(0); // Plug-in is not applied - nothing to do.\n\n\n      if (!isPluginApplied(_targetDomElement)) return;\n      var gmapContext = getContextForElement(_targetDomElement);\n\n      switch (options) {\n        case \"location\":\n          if (params == undefined) {\n            // Getter\n            var location = GmUtility.locationFromLatLng(gmapContext.location);\n            location.radius = gmapContext.radius;\n            location.name = gmapContext.locationName;\n            return location;\n          } else {\n            // Setter\n            if (params.radius) {\n              gmapContext.radius = params.radius;\n            }\n\n            GmUtility.setPosition(gmapContext, new google.maps.LatLng(params.latitude, params.longitude), function (gmapContext) {\n              updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n            });\n          }\n\n          break;\n\n        case \"subscribe\":\n          /**\n           * Provides interface for subscribing for GoogleMap events.\n           * See Google API documentation for details.\n           * Parameters:\n           * - event: string, name of the event\n           * - callback: function, callback function to be invoked\n           */\n          if (params == undefined) {\n            // Getter is not available\n            return null;\n          } else {\n            var event = params.event;\n            var callback = params.callback;\n\n            if (!event || !callback) {\n              console.error(\"LocationPicker: Invalid arguments for method \\\"subscribe\\\"\");\n              return null;\n            }\n\n            google.maps.event.addListener(gmapContext.map, event, callback);\n          }\n\n          break;\n\n        case \"map\":\n          /**\n           * Returns object which allows access actual google widget and marker paced on it.\n           * Structure: {\n           *  map: Instance of the google map widget\n           *  marker: marker placed on map\n           * }\n           */\n          if (params == undefined) {\n            // Getter\n            var locationObj = GmUtility.locationFromLatLng(gmapContext.location);\n            locationObj.formattedAddress = gmapContext.locationName;\n            locationObj.addressComponents = gmapContext.addressComponents;\n            return {\n              map: gmapContext.map,\n              marker: gmapContext.marker,\n              location: locationObj\n            };\n          } else {\n            // Setter is not available\n            return null;\n          }\n\n        case \"autosize\":\n          autosize(gmapContext);\n          return this;\n      }\n\n      return null;\n    }\n\n    return this.each(function () {\n      var $target = $(this); // If plug-in hasn't been applied before - initialize, otherwise - skip\n\n      if (isPluginApplied(this)) {\n        updateMap(getContextForElement(this), $(this), options);\n        return;\n      } // Plug-in initialization is required\n      // Defaults\n\n\n      var settings = $.extend({}, $.fn.locationpicker.defaults, options); // Initialize\n\n      var gmapContext = new GMapContext(this, $.extend({}, {\n        zoom: settings.zoom,\n        center: new google.maps.LatLng(settings.location.latitude, settings.location.longitude),\n        mapTypeId: settings.mapTypeId,\n        mapTypeControl: false,\n        styles: settings.styles,\n        disableDoubleClickZoom: false,\n        scrollwheel: settings.scrollwheel,\n        streetViewControl: false,\n        radius: settings.radius,\n        locationName: settings.locationName,\n        settings: settings,\n        autocompleteOptions: settings.autocompleteOptions,\n        addressFormat: settings.addressFormat,\n        draggable: settings.draggable,\n        markerIcon: settings.markerIcon,\n        markerDraggable: settings.markerDraggable,\n        markerVisible: settings.markerVisible\n      }, settings.mapOptions));\n      $target.data(\"locationpicker\", gmapContext); // Subscribe GMap events\n\n      function displayMarkerWithSelectedArea() {\n        GmUtility.setPosition(gmapContext, gmapContext.marker.position, function (context) {\n          var currentLocation = GmUtility.locationFromLatLng(gmapContext.location);\n          updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n          context.settings.onchanged.apply(gmapContext.domContainer, [currentLocation, context.radius, true]);\n        });\n      }\n\n      if (settings.markerInCenter) {\n        gmapContext.map.addListener(\"bounds_changed\", function () {\n          if (!gmapContext.marker.dragging) {\n            gmapContext.marker.setPosition(gmapContext.map.center);\n            updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n          }\n        });\n        gmapContext.map.addListener(\"idle\", function () {\n          if (!gmapContext.marker.dragging) {\n            displayMarkerWithSelectedArea();\n          }\n        });\n      }\n\n      google.maps.event.addListener(gmapContext.marker, \"drag\", function (event) {\n        updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n      });\n      google.maps.event.addListener(gmapContext.marker, \"dragend\", function (event) {\n        displayMarkerWithSelectedArea();\n      });\n      GmUtility.setPosition(gmapContext, new google.maps.LatLng(settings.location.latitude, settings.location.longitude), function (context) {\n        updateInputValues(settings.inputBinding, gmapContext); // Set  input bindings if needed\n\n        setupInputListenersInput(settings.inputBinding, gmapContext);\n        context.settings.oninitialized($target);\n      });\n    });\n  };\n\n  $.fn.locationpicker.defaults = {\n    location: {\n      latitude: 40.7324319,\n      longitude: -73.82480777777776\n    },\n    locationName: \"\",\n    radius: 500,\n    zoom: 15,\n    mapTypeId: google.maps.MapTypeId.ROADMAP,\n    styles: [],\n    mapOptions: {},\n    scrollwheel: true,\n    inputBinding: {\n      latitudeInput: null,\n      longitudeInput: null,\n      radiusInput: null,\n      locationNameInput: null\n    },\n    enableAutocomplete: false,\n    enableAutocompleteBlur: false,\n    autocompleteOptions: null,\n    addressFormat: 'postal_code',\n    enableReverseGeocode: true,\n    draggable: true,\n    onchanged: function (currentLocation, radius, isMarkerDropped) {},\n    onlocationnotfound: function (locationName) {},\n    oninitialized: function (component) {},\n    // must be undefined to use the default gMaps marker\n    markerIcon: undefined,\n    markerDraggable: true,\n    markerVisible: true\n  };\n})(jQuery);","map":{"version":3,"sources":["C:/Users/hugom/OneDrive/Documentos/GitHub/frontend-pint-2021/Web/frontend/src/views/mapa.js"],"names":["$","GMapContext","domElement","options","_map","google","maps","Map","_marker","Marker","position","LatLng","map","title","visible","markerVisible","draggable","markerDraggable","icon","markerIcon","undefined","marker","circle","location","radius","locationName","addressComponents","formatted_address","addressLine1","addressLine2","streetName","streetNumber","city","district","state","stateOrProvince","settings","domContainer","geodecoder","Geocoder","GmUtility","drawCircle","gmapContext","center","setMap","extend","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","Circle","setPosition","gMapContext","callback","panTo","enableReverseGeocode","updateLocationName","call","locationFromLatLng","lnlg","latitude","lat","longitude","lng","addressByFormat","addresses","format","result","i","length","types","indexOf","geocode","latLng","results","status","GeocoderStatus","OK","address","addressFormat","address_component_from_google_geocode","address_components","OVER_QUERY_LIMIT","setTimeout","component","postalCode","short_name","country","join","trim","isPluginApplied","domObj","getContextForElement","data","updateInputValues","inputBinding","currentLocation","latitudeInput","val","change","longitudeInput","radiusInput","locationNameInput","setupInputListenersInput","on","e","radiusInputValue","originalEvent","isNaN","context","onchanged","apply","enableAutocomplete","blur","autocomplete","places","Autocomplete","get","autocompleteOptions","event","addListener","place","getPlace","geometry","onlocationnotfound","name","enableAutocompleteBlur","latitudeInputValue","longitudeInputValue","autosize","trigger","setCenter","updateMap","$target","fn","locationpicker","defaults","latNew","lngNew","radiusNew","latOld","lngOld","radiusOld","oninitialized","params","_targetDomElement","console","error","locationObj","formattedAddress","each","zoom","mapTypeId","mapTypeControl","styles","disableDoubleClickZoom","scrollwheel","streetViewControl","mapOptions","displayMarkerWithSelectedArea","markerInCenter","dragging","MapTypeId","ROADMAP","isMarkerDropped","jQuery"],"mappings":"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","sourcesContent":["(function ( $ ) {\n\n    /**\n     * Holds google map object and related utility entities.\n     * @constructor\n     */\n    function GMapContext(domElement, options) {\n        var _map = new google.maps.Map(domElement, options);\n        var _marker = new google.maps.Marker({\n            position: new google.maps.LatLng(54.19335, -3.92695),\n            map: _map,\n            title: \"Drag Me\",\n            visible: options.markerVisible,\n            draggable: options.markerDraggable,\n            icon: (options.markerIcon !== undefined) ? options.markerIcon : undefined\n        });\n        return {\n            map: _map,\n            marker: _marker,\n            circle: null,\n            location: _marker.position,\n            radius: options.radius,\n            locationName: options.locationName,\n            addressComponents: {\n                formatted_address: null,\n                addressLine1: null,\n                addressLine2: null,\n                streetName: null,\n                streetNumber: null,\n                city: null,\n                district: null,\n                state: null,\n                stateOrProvince: null\n            },\n            settings: options.settings,\n            domContainer: domElement,\n            geodecoder: new google.maps.Geocoder()\n        }\n    }\n\n    // Utility functions for Google Map Manipulations\n    var GmUtility = {\n        /**\n         * Draw a circle over the the map. Returns circle object.\n         * Also writes new circle object in gmapContext.\n         *\n         * @param center - LatLng of the center of the circle\n         * @param radius - radius in meters\n         * @param gmapContext - context\n         * @param options\n         */\n        drawCircle: function(gmapContext, center, radius, options) {\n            if (gmapContext.circle != null) {\n                gmapContext.circle.setMap(null);\n            }\n            if (radius > 0) {\n                radius *= 1;\n                options = $.extend({\n                    strokeColor: \"#0000FF\",\n                    strokeOpacity: 0.35,\n                    strokeWeight: 2,\n                    fillColor: \"#0000FF\",\n                    fillOpacity: 0.20\n                }, options);\n                options.map = gmapContext.map;\n                options.radius = radius;\n                options.center = center;\n                gmapContext.circle = new google.maps.Circle(options);\n                return gmapContext.circle;\n            }\n            return null;\n        },\n        /**\n         *\n         * @param gMapContext\n         * @param location\n         * @param callback\n         */\n        setPosition: function(gMapContext, location, callback) {\n            gMapContext.location = location;\n            gMapContext.marker.setPosition(location);\n            gMapContext.map.panTo(location);\n            this.drawCircle(gMapContext, location, gMapContext.radius, {});\n            if (gMapContext.settings.enableReverseGeocode) {\n                this.updateLocationName(gMapContext, callback);\n            } else {\n                if (callback) {\n                    callback.call(this, gMapContext);\n                }\n            }\n\n        },\n        locationFromLatLng: function(lnlg) {\n            return {latitude: lnlg.lat(), longitude: lnlg.lng()}\n        },\n        addressByFormat: function (addresses, format) {\n            var result = null;\n            for(var i = addresses.length - 1; i >= 0; i--){\n                if(addresses[i].types.indexOf(format) >= 0){\n                    result = addresses[i];\n                }\n            }\n            return result || addresses[0];\n        },\n        updateLocationName: function(gmapContext, callback) {\n            gmapContext.geodecoder.geocode({\n                latLng: gmapContext.marker.position\n            }, function(results, status) {\n                if (status == google.maps.GeocoderStatus.OK && results.length > 0) {\n                    var address = GmUtility.addressByFormat(results, gmapContext.settings.addressFormat);\n                    gmapContext.locationName = address.formatted_address;\n                    gmapContext.addressComponents = GmUtility.address_component_from_google_geocode(address.address_components);\n                }else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n                    return setTimeout(function () {\n                        GmUtility.updateLocationName(gmapContext, callback);\n                    }, 1000);\n                }\n                if (callback) {\n                    callback.call(this, gmapContext);\n                }\n            });\n        },\n        address_component_from_google_geocode: function(address_components) {\n            var result = {};\n            for (var i = address_components.length-1; i>=0; i--) {\n                var component = address_components[i];\n                // Postal code\n                if (component.types.indexOf('postal_code') >= 0) {\n                    result.postalCode = component.short_name;\n                }\n                // Street number\n                else if (component.types.indexOf('street_number') >= 0) {\n                    result.streetNumber = component.short_name;\n                }\n                // Street name\n                else if (component.types.indexOf('route') >= 0) {\n                    result.streetName = component.short_name;\n                }\n                // City\n                else if (component.types.indexOf('locality') >= 0) {\n                    result.city = component.short_name;\n                }\n                // District\n                else if (component.types.indexOf('sublocality') >= 0) {\n                    result.district = component.short_name;\n                }\n                // State \\ Province\n                else if (component.types.indexOf('administrative_area_level_1') >= 0) {\n                    result.stateOrProvince = component.short_name;\n                }\n                // State \\ Province\n                else if (component.types.indexOf('country') >= 0) {\n                    result.country = component.short_name;\n                }\n            }\n            result.addressLine1 = [result.streetNumber, result.streetName].join(' ').trim();\n            result.addressLine2 = '';\n            return result;\n        }\n    };\n\n    function isPluginApplied(domObj) {\n        return getContextForElement(domObj) != undefined;\n    }\n\n    function getContextForElement(domObj) {\n        return $(domObj).data(\"locationpicker\");\n    }\n\n    function updateInputValues(inputBinding, gmapContext){\n        if (!inputBinding) return;\n        var currentLocation = GmUtility.locationFromLatLng(gmapContext.marker.position);\n        if (inputBinding.latitudeInput) {\n            inputBinding.latitudeInput.val(currentLocation.latitude).change();\n        }\n        if (inputBinding.longitudeInput) {\n            inputBinding.longitudeInput.val(currentLocation.longitude).change();\n        }\n        if (inputBinding.radiusInput) {\n            inputBinding.radiusInput.val(gmapContext.radius).change();\n        }\n        if (inputBinding.locationNameInput) {\n            inputBinding.locationNameInput.val(gmapContext.locationName).change();\n        }\n    }\n\n    function setupInputListenersInput(inputBinding, gmapContext) {\n        if (inputBinding) {\n            if (inputBinding.radiusInput){\n                inputBinding.radiusInput.on(\"change\", function(e) {\n                    var radiusInputValue = $(this).val();\n                    if (!e.originalEvent || isNaN(radiusInputValue)) { return }\n                    gmapContext.radius = radiusInputValue;\n                    GmUtility.setPosition(gmapContext, gmapContext.location, function(context){\n                        context.settings.onchanged.apply(gmapContext.domContainer,\n                            [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                    });\n                });\n            }\n            if (inputBinding.locationNameInput && gmapContext.settings.enableAutocomplete) {\n                var blur = false;\n                gmapContext.autocomplete = new google.maps.places.Autocomplete(inputBinding.locationNameInput.get(0), gmapContext.settings.autocompleteOptions);\n                google.maps.event.addListener(gmapContext.autocomplete, 'place_changed', function() {\n                    blur = false;\n                    var place = gmapContext.autocomplete.getPlace();\n                    if (!place.geometry) {\n                        gmapContext.settings.onlocationnotfound(place.name);\n                        return;\n                    }\n                    GmUtility.setPosition(gmapContext, place.geometry.location, function(context) {\n                        updateInputValues(inputBinding, context);\n                        context.settings.onchanged.apply(gmapContext.domContainer,\n                            [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                    });\n                });\n                if(gmapContext.settings.enableAutocompleteBlur) {\n                  inputBinding.locationNameInput.on(\"change\", function(e) {\n                    if (!e.originalEvent) { return }\n                    blur = true;\n                  });\n                  inputBinding.locationNameInput.on(\"blur\", function(e) {\n                    if (!e.originalEvent) { return }\n                    setTimeout(function() {\n                        var address = $(inputBinding.locationNameInput).val();\n                        if (address.length > 5 && blur) {\n                            blur = false;\n                            gmapContext.geodecoder.geocode({'address': address}, function(results, status) {\n                                if(status == google.maps.GeocoderStatus.OK  && results && results.length) {\n                                    GmUtility.setPosition(gmapContext, results[0].geometry.location, function(context) {\n                                        updateInputValues(inputBinding, context);\n                                        context.settings.onchanged.apply(gmapContext.domContainer,\n                                            [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                                    });\n                                }\n                            });\n                        }\n                    }, 1000);\n                  });\n                }\n            }\n            if (inputBinding.latitudeInput) {\n                inputBinding.latitudeInput.on(\"change\", function(e) {\n                    var latitudeInputValue = $(this).val();\n                    if (!e.originalEvent || isNaN(latitudeInputValue) ) { return }\n                        GmUtility.setPosition(gmapContext, new google.maps.LatLng(latitudeInputValue, gmapContext.location.lng()), function(context){    context.settings.onchanged.apply(gmapContext.domContainer,\n                            [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                        updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n                    });\n                });\n            }\n            if (inputBinding.longitudeInput) {\n                inputBinding.longitudeInput.on(\"change\", function(e) {\n                    var longitudeInputValue = $(this).val();\n                    if (!e.originalEvent || isNaN(longitudeInputValue) ) { return }\n                    GmUtility.setPosition(gmapContext, new google.maps.LatLng(gmapContext.location.lat(), longitudeInputValue), function(context){\n                        context.settings.onchanged.apply(gmapContext.domContainer,\n                            [GmUtility.locationFromLatLng(context.location), context.radius, false]);\n                        updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n                    });\n                });\n            }\n        }\n    }\n\n    function autosize(gmapContext) {\n        google.maps.event.trigger(gmapContext.map, 'resize');\n        setTimeout(function() {\n            gmapContext.map.setCenter(gmapContext.marker.position);\n        }, 300);\n    }\n\n    function updateMap(gmapContext, $target, options) {\n        var settings = $.extend({}, $.fn.locationpicker.defaults, options ),\n            latNew = settings.location.latitude,\n            lngNew = settings.location.longitude,\n            radiusNew = settings.radius,\n            latOld = gmapContext.settings.location.latitude,\n            lngOld = gmapContext.settings.location.longitude,\n            radiusOld = gmapContext.settings.radius;\n\n        if (latNew == latOld && lngNew == lngOld && radiusNew == radiusOld)\n        return;\n\n        gmapContext.settings.location.latitude = latNew;\n        gmapContext.settings.location.longitude = lngNew;\n        gmapContext.radius = radiusNew;\n\n        GmUtility.setPosition(gmapContext, new google.maps.LatLng(gmapContext.settings.location.latitude, gmapContext.settings.location.longitude), function(context){\n            setupInputListenersInput(gmapContext.settings.inputBinding, gmapContext);\n            context.settings.oninitialized($target);\n        });\n    }\n    /**\n     * Initializeialization:\n     *  $(\"#myMap\").locationpicker(options);\n     * @param options\n     * @param params\n     * @returns {*}\n     */\n    $.fn.locationpicker = function( options, params ) {\n        if (typeof options == 'string') { // Command provided\n            var _targetDomElement = this.get(0);\n            // Plug-in is not applied - nothing to do.\n            if (!isPluginApplied(_targetDomElement)) return;\n            var gmapContext = getContextForElement(_targetDomElement);\n            switch (options) {\n                case \"location\":\n                    if (params == undefined) { // Getter\n                        var location = GmUtility.locationFromLatLng(gmapContext.location);\n                        location.radius = gmapContext.radius;\n                        location.name = gmapContext.locationName;\n                        return location;\n                    } else { // Setter\n                        if (params.radius) {\n                            gmapContext.radius = params.radius;\n                        }\n                        GmUtility.setPosition(gmapContext, new google.maps.LatLng(params.latitude, params.longitude), function(gmapContext) {\n                            updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n                        });\n                    }\n                    break;\n                case \"subscribe\":\n                    /**\n                     * Provides interface for subscribing for GoogleMap events.\n                     * See Google API documentation for details.\n                     * Parameters:\n                     * - event: string, name of the event\n                     * - callback: function, callback function to be invoked\n                     */\n                    if (params == undefined) { // Getter is not available\n                        return null;\n                    } else {\n                        var event = params.event;\n                        var callback = params.callback;\n                        if (!event || ! callback) {\n                            console.error(\"LocationPicker: Invalid arguments for method \\\"subscribe\\\"\")\n                            return null;\n                        }\n                        google.maps.event.addListener(gmapContext.map, event, callback);\n                    }\n                    break;\n                case \"map\":\n                    /**\n                     * Returns object which allows access actual google widget and marker paced on it.\n                     * Structure: {\n                     *  map: Instance of the google map widget\n                     *  marker: marker placed on map\n                     * }\n                     */\n                    if (params == undefined) { // Getter\n                        var locationObj = GmUtility.locationFromLatLng(gmapContext.location);\n                        locationObj.formattedAddress = gmapContext.locationName;\n                        locationObj.addressComponents = gmapContext.addressComponents;\n                        return {\n                            map: gmapContext.map,\n                            marker: gmapContext.marker,\n                            location: locationObj\n                        }\n                    } else { // Setter is not available\n                        return null;\n                    }\n                case \"autosize\":\n                    autosize(gmapContext);\n                    return this;\n            }\n            return null;\n        }\n        return this.each(function() {\n            var $target = $(this);\n            // If plug-in hasn't been applied before - initialize, otherwise - skip\n            if (isPluginApplied(this)){\n              updateMap(getContextForElement(this), $(this), options);\n              return;\n            }\n            // Plug-in initialization is required\n            // Defaults\n            var settings = $.extend({}, $.fn.locationpicker.defaults, options );\n            // Initialize\n            var gmapContext = new GMapContext(this, $.extend({}, {\n                zoom: settings.zoom,\n                center: new google.maps.LatLng(settings.location.latitude, settings.location.longitude),\n                mapTypeId: settings.mapTypeId,\n                mapTypeControl: false,\n                styles: settings.styles,\n                disableDoubleClickZoom: false,\n                scrollwheel: settings.scrollwheel,\n                streetViewControl: false,\n                radius: settings.radius,\n                locationName: settings.locationName,\n                settings: settings,\n                autocompleteOptions : settings.autocompleteOptions,\n                addressFormat: settings.addressFormat,\n                draggable: settings.draggable,\n                markerIcon: settings.markerIcon,\n                markerDraggable: settings.markerDraggable,\n                markerVisible: settings.markerVisible\n            },  settings.mapOptions));\n            $target.data(\"locationpicker\", gmapContext);\n            // Subscribe GMap events\n            function displayMarkerWithSelectedArea() {\n                GmUtility.setPosition(gmapContext, gmapContext.marker.position, function (context) {\n                    var currentLocation = GmUtility.locationFromLatLng(gmapContext.location);\n                    updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n                    context.settings.onchanged.apply(gmapContext.domContainer, [currentLocation, context.radius, true]);\n                });\n            }\n            if (settings.markerInCenter) {\n                gmapContext.map.addListener(\"bounds_changed\", function () {\n                    if (!gmapContext.marker.dragging) {\n                        gmapContext.marker.setPosition(gmapContext.map.center);\n                        updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n                    }\n                });\n                gmapContext.map.addListener(\"idle\", function () {\n                    if (!gmapContext.marker.dragging) {\n                        displayMarkerWithSelectedArea();\n                    }\n                });\n            }\n            google.maps.event.addListener(gmapContext.marker, \"drag\", function(event) {\n                updateInputValues(gmapContext.settings.inputBinding, gmapContext);\n            });\n            google.maps.event.addListener(gmapContext.marker, \"dragend\", function(event) {\n                displayMarkerWithSelectedArea();\n            });\n            GmUtility.setPosition(gmapContext, new google.maps.LatLng(settings.location.latitude, settings.location.longitude), function(context){\n                updateInputValues(settings.inputBinding, gmapContext);\n                // Set  input bindings if needed\n                setupInputListenersInput(settings.inputBinding, gmapContext);\n                context.settings.oninitialized($target);\n            });\n        });\n    };\n    $.fn.locationpicker.defaults = {\n        location: {latitude: 40.7324319, longitude: -73.82480777777776},\n        locationName: \"\",\n        radius: 500,\n        zoom: 15,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        styles: [],\n        mapOptions: {},\n        scrollwheel: true,\n        inputBinding: {\n            latitudeInput: null,\n            longitudeInput: null,\n            radiusInput: null,\n            locationNameInput: null\n        },\n        enableAutocomplete: false,\n        enableAutocompleteBlur: false,\n        autocompleteOptions: null,\n        addressFormat: 'postal_code',\n        enableReverseGeocode: true,\n        draggable: true,\n        onchanged: function(currentLocation, radius, isMarkerDropped) {},\n        onlocationnotfound: function(locationName) {},\n        oninitialized: function (component) {},\n        // must be undefined to use the default gMaps marker\n        markerIcon: undefined,\n        markerDraggable: true,\n        markerVisible : true\n    }\n}( jQuery ));\n"]},"metadata":{},"sourceType":"module"}